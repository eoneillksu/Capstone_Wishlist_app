@model Capstone_Wishlist_app.Models.RegisterChildModel
@using Capstone_Wishlist_app.Models

@{
    ViewBag.Title = "RegisterChild";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Register a Child - @Model.FamilyName Family</h2>

@if (User.IsInRole("Admin")) {
    <ol class="breadcrumb">
        <li>
            <a href=@Url.Action("Index", "Home")>
                <i class="fa fa-home"></i>
                Home
            </a>
        </li>
        <li>
            <a href=@Url.Action("Index")>
                <i class="fa fa-users"></i>
                Family List
            </a>
        </li>
        <li>
            <a href=@Url.Action("Administer", new { id = Model.FamilyId })>
                @Model.FamilyId - @Model.FamilyName Family
            </a>
        </li>
        <li class="active">Register Child</li>
    </ol>
} else {
    <ol class="breadcrumb">
        <li>
            <a href=@Url.Action("Index", "Home")>
                <i class="fa fa-home"></i>
                Home
            </a>
        </li>
        <li class="active">Register Child</li>
    </ol>
}

@if (TempData.ContainsKey("registeredChild")) {
    var child = TempData["registeredChild"] as RegisteredChildViewModel;

    <div class="well well-sm">
        <p class="text-success">
            <i class="fa fa-check-square-o"></i>
            @child.FirstName is successfully registered!
        </p>
        <p>
            View <b>@child.FirstName's</b> profile @Html.ActionLink("here", "ViewProfile", "Child", new { id = child.ChildId }, null)
            or continue registering children below.
        </p>
        <a href=@Url.Action("FindGifts", "Wishlist", new { id = child.WishlistId }) class="btn btn-default">
            <i class="fa fa-gift"></i>
            <i class="fa fa-search"></i>
            Find gifts for @child.FirstName
        </a>
    </div>
}

@using (Html.BeginForm(new { id = Model.FamilyId })) {
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Child's Information</h4>
        <hr />
        @Html.HiddenFor(model => model.FamilyId)
        @Html.HiddenFor(model => model.FamilyName)

        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Age, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Gender, new SelectListItem[] {
                    new SelectListItem {
                        Text = "Male",
                        Value = Gender.Male.ToString()
                    },
                    new SelectListItem {
                        Text = "Female",
                        Value = Gender.Female.ToString()
                    },
                    new SelectListItem {
                        Text = "Unspecified",
                        Value = Gender.Unspecified.ToString()
                    }
                }, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
            </div>
        </div>

        <br />
        <h4>@Html.DisplayNameFor(model => model.BiographyText)</h4>
        <hr/>
        <div class="form-group">
            <div class="col-md-10">
                <p>Use this space to briefly describe the child.</p>
                <ul>
                    <li>Focus on the child's interests and abilities so that donors will understand how much these gifts will be appreciated.</li>
                    <li class="text-danger">Do not include any information that may be used to easily locate or identify the child.</li>
                </ul>
            </div>
        </div>
        
        <div class="form-group">
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.BiographyText, new { @class = "form-control", multiline = true, style = "max-width:600px", rows = "12", @Value = "" })
                @Html.ValidationMessageFor(model => model.BiographyText, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-2">
                <input type="submit" value="Register" class="btn btn-primary" />
            </div>
        </div>
    </div>
}
